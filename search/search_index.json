{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This site hosts documentation for developers who are looking to integrate  Khalti as a Payment Option in their online platform. If you fall into that  category, please keep reading.</p> <p>Khalti is a payment gateway, digital wallet and API provider system for various online services for Nepal.</p> <p>With Khalti SDK/API, you can accepts payments from:</p> <ol> <li>Khalti users.</li> <li>eBanking users of our partner banks.</li> <li>Mobile banking users of our mobile banking partner banks.</li> <li>SCT/VISA card holders.</li> <li>connectIPS users.</li> </ol> <p>Using Khalti Payment Gateway, you do not need to integrate with individual banks.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple Payment Options for Customers</li> <li>Highly secure and Easy Integrations</li> <li>SDKs are available for Web (JavaScript), Android and iOS.</li> <li>Customers can make wallet payments without leaving your   platform.</li> <li>Secured Transaction uses 2 step authentication i.e Khalti Pin and Khalti Password.    Transaction Processing is disabled on multiple request for wrong Khalti Pin.</li> <li>Merchant Dashboard to view transactions, issue refunds, filter and download reports etc.</li> <li>Multi User System </li> <li>Realtime Balance updates in Merchant Dashboard on every successful payments made by customers</li> <li>Amount collected in Merchant Dashboard can we deposited/transferred to bank accounts anytime</li> </ul>"},{"location":"#support","title":"Support","text":"<p> For Queries, feel free to call us at: </p> <ul> <li> <p>Mobile (Viber / Whatsapp / Skype): 9801165557, 9801165565</p> </li> <li> <p>Email: merchant@khalti.com</p> </li> </ul>"},{"location":"contact-us/","title":"Contact Us","text":"<p>Contact Our Merchant Team</p> <ul> <li> <p>Mobile (Viber / Whatsapp):  9801165557</p> </li> <li> <p>Email: merchant@khalti.com</p> </li> </ul> <p>(To integrate Khalti to your business and other online platforms.)</p> <p>Contact Our Merchant Support</p> <ul> <li>Mobile (Viber / Whatsapp): 9801165557, 9801165565</li> <li>Email: merchantcare@khalti.com</li> </ul> <p>Contact Our Technical Team</p> <ul> <li> <p>Mobile (Viber / Whatsapp): 9801165557, 9801165565</p> </li> <li> <p>Email / Skype: saphal.shrestha@khalti.com, merchant@khalti.com (For payment gateway integration support.)</p> </li> </ul>"},{"location":"contribution/","title":"Contribution","text":""},{"location":"contribution/#introduction","title":"Introduction","text":"<p>Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue.</p>"},{"location":"contribution/#key-information","title":"Key information","text":"<ul> <li>The documentation source files are inside <code>content/</code> directory.</li> <li>The source files are written in <code>Markdown</code>.</li> <li>The HTML documentation site is built using mkdocs,   a Python package to build documentation.</li> </ul>"},{"location":"contribution/#how-to-contribute","title":"How to contribute","text":""},{"location":"contribution/#fork-it-clone-it","title":"Fork it, clone it","text":"<p>Fork the docs repo by using the Github interface.</p> <p>Clone that fork into your development machine.</p> <pre><code>git clone git@github.com:&lt;YOUR_USERNAME&gt;/khalti-docs-official-repo.git\n</code></pre>"},{"location":"contribution/#locally-building-and-serving","title":"Locally building and serving","text":"<p>Install <code>mkdocs</code> using any of the methods specified in the official documentation.</p> <p>The current theme used for mkdocs is <code>material</code>. You will need to install the theme as well.</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>To serve the docs locally, run:</p> <pre><code>mkdocs serve\n</code></pre> <p>This will build and host the <code>.md</code> files in <code>http://localhost:8000</code>. It will also live reload the page when you make changes in the source files.</p>"},{"location":"contribution/#pushing-changes","title":"Pushing changes","text":"<p>Once you've made necessary changes, push it to your forked repository by running:</p> <pre><code>git push origin master\n</code></pre> <p>After you've done this, you need to ask us to merge your changes to the main repo. Github provides pull request feature to accomplish that.</p> <p>Go to the pull requests tab of the main repo.</p> <p>You'll notice a big green, New pull request button on the top right side of the page. Click on that button and follow from there. Your pull request will be reviewed and merged by one of Khalti development staff.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>There are four steps for integrating Khalti payment to a merchant system.</p> <ul> <li>1. Signup as a merchant and  as a User</li> <li>2. Understand Khalti payment process<ul> <li>2.1. Transaction States<ul> <li>1. Initiated</li> <li>2. Confirmed</li> <li>3. Completed</li> <li>4. Disabled</li> <li>5. Refunded</li> <li>6. Partially refunded</li> <li>7. Failed</li> </ul> </li> </ul> </li> <li>3. Test integration<ul> <li>3.1. Client side integration</li> <li>3.2. Server side integration</li> </ul> </li> <li>4. Go live<ul> <li>4.1. Further processes</li> </ul> </li> </ul>"},{"location":"getting-started/#1-signup-as-a-merchant-and-as-a-user","title":"1. Signup as a merchant and  as a User","text":"<p>First of all you will need a merchant and a consumer accounts. Merchant is an online business service like e-commerce websites, ISP online payment, Movie online purchase etc. Consumer is an end user who uses Khalti to purchase products or services from merchants.</p> <p>Please follow links below to create a merchant and a consumer accounts if you have not already.</p> <ul> <li>Create a merchant account</li> <li>Create a consumer account</li> </ul> <p>Info</p> <p>For the latest version of Khalti Payment Gateway on web, Please visit ePayment Checkout</p>"},{"location":"getting-started/#2-understand-khalti-payment-process","title":"2. Understand Khalti payment process","text":""},{"location":"getting-started/#21-transaction-states","title":"2.1. Transaction States","text":""},{"location":"getting-started/#1-initiated","title":"1. Initiated","text":"<p>It is the first state of a transaction. Transactions are initiated after mobile number and khalti pin along with other transaction details are provided.</p>"},{"location":"getting-started/#2-confirmed","title":"2. Confirmed","text":"<p>A transaction is confirmed after transaction details (transaction token, confirmation_code and  3rd party transaction_pin) are provided by the consumer. Check how to set and update khalti pin here.</p>"},{"location":"getting-started/#3-completed","title":"3. Completed","text":"<p>Merchant server then requests khalti server to verify the transaction. After the transaction is in completed state consumer is informed the transaction was successfully completed.</p>"},{"location":"getting-started/#4-disabled","title":"4. Disabled","text":"<p>A transaction could be disabled due to the possibility of 'confirmation_code' exploitation.</p>"},{"location":"getting-started/#5-refunded","title":"5. Refunded","text":"<p>A merchant can refund the successful payments within a limited period of time.</p>"},{"location":"getting-started/#6-partially-refunded","title":"6. Partially refunded","text":"<p>A completed transaction also can be partially refunded.</p>"},{"location":"getting-started/#7-failed","title":"7. Failed","text":"<p>Normally, a successful transaction has at least three changes of states initiate, confirm and complete. A client first initiates and then confirms payment while the server finally verifies it and the payment process is completed.</p>"},{"location":"getting-started/#3-test-integration","title":"3. Test integration","text":"<p>Now that you know how Khalti payment works. Its time to integrate it into your system. A merchant must complete test integration using test keys. Test keys start with <code>test_</code>.</p> <p>In test mode, transactions are sandboxed, which means fund is not moved from a consumer to the merchant. Khalti must to be integrated at client and server.</p> <p>Payment via E-Banking and Debit/Credit card is not supported in the test environment. After you successfully integrate wallet, you need not to concern about E-Banking and Card payment integration.</p>"},{"location":"getting-started/#31-client-side-integration","title":"3.1. Client side integration","text":"<p>For now there is only one way to integrate Khalti at client side, through SDKs. We have developed SDKs for every major plaforms and we call it <code>Checkout</code>.</p> <p>Checkouts provide all the necessary UIs and perform necessary processes to initiate and confirm payment.</p> <ul> <li>Web kit</li> <li>Android kit</li> <li>iOS kit</li> <li>Flutter kit</li> </ul>"},{"location":"getting-started/#32-server-side-integration","title":"3.2. Server side integration","text":"<p>After user confirms payment, it has to be verified by Khalti. Fund from user account is moved to merchant only if verification succeeds. Verification must be done by the merchant server using a secret key.</p> <ul> <li>Verification API</li> <li>Transaction API</li> </ul>"},{"location":"getting-started/#4-go-live","title":"4. Go live","text":"<p>After successful integration test, live keys will be generated in the merchant dashboard. The merchant must replace test keys with live ones. Live keys start with <code>live_X</code>. Replace <code>test_public_X</code> and <code>test_secret_X</code> keys with <code>live_public_X</code> and <code>live_secret_X</code> keys respectively.</p>"},{"location":"getting-started/#41-further-processes","title":"4.1. Further processes","text":"<p>Even successful integration itself doesn't let you receive payments above NRs. 200 per transaction. Please fill KYC form and contact us at 9801165565/9801856440/9801165558/9801165557 to remove the limits and accept payments without restrictions.</p>"},{"location":"gotchas/","title":"FAQ's","text":""},{"location":"gotchas/#1-how-can-i-sign-up-as-a-merchant","title":"1. How can I sign up as a merchant?","text":"<p>Please go this link for a merchant sign up: https://khalti.com/join/merchant/</p>"},{"location":"gotchas/#2-how-to-integrate-kpg","title":"2. How to integrate KPG?","text":"<p>Based on your requirement please visit following links for Khalti integration:</p> <ul> <li>Web integration</li> <li>Android integration</li> <li>iOS integration</li> <li>Flutter integration<ul> <li>With Payment interface</li> <li>Without payment interface</li> </ul> </li> </ul> <ul> <li>Khalti integration via plugins<ul> <li>For WooCommerce</li> <li>For Opencart</li> <li>For Magneto</li> <li>For Prestashop</li> <li>For WHMCS</li> </ul> </li> </ul>"},{"location":"gotchas/#3-what-to-do-after-a-successful-test-transaction","title":"3. What to do after a successful test transaction ?","text":"<p>After a successful test transaction, you will able to accept payments live. However, before going live, please contact our team for the necessary coordination</p>"},{"location":"gotchas/#4-does-khalti-have-sdk-for-hybrid-apps","title":"4. Does Khalti have SDK for hybrid Apps?","text":"<p>We do have SDK for Flutter. But for hybrid apps based on other frameworks, we don't have a specific SDK.  Find options in <code>Client Integration</code>, which support Khalti checkout integration with your app.</p>"},{"location":"gotchas/#5-can-i-share-merchant-keys","title":"5. Can I share merchant keys?","text":"<p>Secret key must not be shared with anyone. Ensure it does not get leaked by any means. If you key got compromised you can regenerate new one from your merchant dashboard.</p>"},{"location":"gotchas/#6-can-i-integrate-khalti-in-my-statichtml-website","title":"6. Can I integrate Khalti in my static/HTML website?","text":"<p>Complete Khalti integration in Static/HTML site is not possible. If the currently available options failed to meet your requirement leave us your feedback.</p>"},{"location":"gotchas/#7-what-can-i-resolve-an-issue-while-installing-the-plugin","title":"7. What can I resolve an issue while installing the plugin ?","text":"<p>First, check if cURL is enabled. You should check if you miss out any dependency or extension. There might be common SSL issues. You can also tweak the code (of the plugin you got from GitHub) on your own.</p> <p>For debugging paste this in your code to get the configuration and predefined variables. <pre><code>&lt;?php phpinfo();?&gt;\n</code></pre> Also, see your server log.</p>"},{"location":"gotchas/#8-what-is-khalti-mpin","title":"8. What is Khalti mPIN?","text":"<p>Khalti mPIN is the four digit pin, used by the user while making payment of third party transactions.</p> <p>It can created or changed at the Transaction Pin section under Account in khalti web and Settings in khalti app.</p>"},{"location":"gotchas/#9-i-need-to-refund-payment-to-the-user-how-can-i-refund-a-transaction","title":"9. I need to refund payment to the user. How can I refund a transaction?","text":"<p>You can refund the payment to the user from your dashboard.</p>"},{"location":"gotchas/#gotchas","title":"Gotchas","text":""},{"location":"gotchas/#cors-issues","title":"CORS issues","text":"<p>If you are getting CORS issues, read the docs again very thoroughly. You need to call verification API from your server to verify, so it is necessary to pass the data to your server first.</p>"},{"location":"gotchas/#server-errors","title":"Server errors","text":"<p>If you get error response \"Fee not found.\" while testing, check your fee and set fee between Rs. 10 to Rs. 200. If you are using live keys contact merchant support to find your transaction limits.</p>"},{"location":"gotchas/#payment-errors","title":"Payment errors","text":"<p>If you get error response \"Amount must be less than 200.\" while testing, check you have complete all the contract process. If you are using live keys contact merchant support for further details.</p>"},{"location":"gotchas/#frame-options-and-clickjacking-protection","title":"Frame Options and Clickjacking protection","text":"<p>Refused to display 'https://khalti.com/payment/widget/' in a frame because it set 'X-Frame-Options' to 'deny'.</p> <p>You are using HTTP response header 'X-Frame-Options' that avoids <code>&lt;iframe&gt;</code> rendering when you set it to 'deny'. But Khalti gateway uses iframe payment form, to accept payment from Khalti you need to allow iframe at least for khalti.com. You have a configuration option 'allow-from' with x-frame-options to allow from a specific domain. You can simply do this in your server configuration:</p> <pre><code>X-Frame-Options \"allow-from https://khalti.com\"\n</code></pre> <p>But using x-frame-options is not an internet standard. It is almost absolute; modern browsers like chrome and safari don't support it.  The recommended way is to use 'frame-ancestors'  CSP rule. (legacy browsers like IE do not support it ). So also for this error:</p> <p>Refused to display 'https://khalti.com/payment/widget/' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\".</p> <p>You need to configure the server as:</p> <pre><code>Content-Security-Policy frame-ancestors 'self' khalti.com *.khalti.com\n</code></pre> <p>One can use both the options for full browser compatibility. So, please change your server configuration accordingly.</p>"},{"location":"khalti-epayment/","title":"Web Checkout (KPG-2)","text":"<p>This documentation details the process of implementing the latest e-Payment Checkout platform released by Khalti.The latest version is accessible through pay.khalti.com</p>"},{"location":"khalti-epayment/#how-it-works","title":"How it works?","text":"<ul> <li>User visits the merchant's website to make some purchase</li> <li>A unique <code>purchase_order_id</code> is generated at merchant's system</li> <li>Payment request is made to Khalti providing the <code>purchase_order_id</code>, <code>amount</code> in paisa and <code>return_url</code></li> <li>User is redirected to the epayment portal (eg. https://pay.khalti.com)</li> <li>After payment is made by the user, a successful callback is made to the <code>return_url</code></li> <li>The merchant website can optionally confirm the payment received</li> <li>The merchant website then proceeds other steps after payment confirmation</li> </ul>"},{"location":"khalti-epayment/#getting-started","title":"Getting Started","text":"<p>There is no special installation plugin or SDK required for this provided you are able to make a POST request from your web application. However, we shall come up with handy plugins in coming days.</p> <p>Tip</p> <p>A merchant account is required if you haven't created at.</p> <p>Access Information</p> <p>For Sandbox Access</p> <p>Signup from  https://test-web.khalti.com/#/join/merchant as a merchant.</p> <p>For Production Access</p> <p>Please visit https://admin.khalti.com</p> <p>Test Credentials for sandbox environment</p> <p>Test Khalti ID for 9800000000 9800000001 9800000002 9800000003 9800000004 9800000005</p> <p>Test MPIN 1111</p> <p>Test OTP 987654</p>"},{"location":"khalti-epayment/#api-authorization","title":"API Authorization","text":"<p>HTTP Authorization for api requests is done using Auth Keys. Auth Key must be passed in the  header for authorization in the following format </p> <pre><code>{\n\"Authorization\": \"Key &lt;LIVE_SECRET_KEY&gt;\"  }  </code></pre> <p>Tip</p> <p>Use <code>live_secret_key</code> from a.khalti.com during sandbox testing and use <code>live_secret_key</code> from khalti.com for production environments.</p>"},{"location":"khalti-epayment/#api-endpoints","title":"API Endpoints","text":"<p>API Endpoints <p>Sandbox</p> <p>https://a.khalti.com/api/v2/</p> <p>Production</p> <p>https://khalti.com/api/v2/</p> </p>"},{"location":"khalti-epayment/#initiating-a-payment-request","title":"Initiating a Payment request","text":"<p>Every payment request should be first initiated from the merchant as a server side <code>POST</code> request. Upon success, a unique request identifier is provided called <code>pidx</code> that should be used for any future references</p> URL Method Authorization Format /epayment/initiate/ POST Required application/json"},{"location":"khalti-epayment/#json-payload-details","title":"JSON Payload Details","text":"Field Required Description return_url Yes <ul> <li>Landing page after the transaction. </li><li>Field must contain a URL.</li></ul> website_url Yes <ul> <li>The URL of the website.  </li><li>Field must contain a URL.</li></ul> amount Yes <ul> <li>Total payable amount excluding the service charge. </li><li> Amount must be passed in Paisa </li></ul> purchase_order_id Yes Unique identifier for the transaction generated by merchant purchase_order_name Yes This is the name of the product. customer_info No This field represents to whom the txn is going to be billed to. amount_breakdown No Any number of labels and amounts can be passed. product_details No No of set is unlimited"},{"location":"khalti-epayment/#sample-request-payload","title":"Sample Request Payload","text":"<pre><code>{\n\"return_url\": \"https://example.com/payment/\",\n\"website_url\": \"https://example.com/\",\n\"amount\": 1300,\n\"purchase_order_id\": \"test12\",\n\"purchase_order_name\": \"test\",\n\"customer_info\": {\n\"name\": \"Ashim Upadhaya\",\n\"email\": \"example@gmail.com\",\n\"phone\": \"9811496763\"\n},\n\"amount_breakdown\": [\n{\n\"label\": \"Mark Price\",\n\"amount\": 1000\n},\n{\n\"label\": \"VAT\",\n\"amount\": 300\n}\n],\n\"product_details\": [\n{\n\"identity\": \"1234567890\",\n\"name\": \"Khalti logo\",\n\"total_price\": 1300,\n\"quantity\": 1,\n\"unit_price\": 1300\n}\n]\n}\n</code></pre> <p>Success Response<pre><code>{\n\"pidx\": \"S8QJg2VALZGTJRkKqVxjqB\",\n\"payment_url\": \"https://test-pay.khalti.com/?pidx=S8QJg2VALZGTJRkKqVxjqB/\"\n}\n</code></pre> </p> <p>After getting the success response, the user should be redirected to the <code>payment_url</code> obtained in the success response.</p>"},{"location":"khalti-epayment/#error-responses","title":"Error Responses","text":"<p>return_url is blank</p> <pre><code>{\n\"return_url\": [\n\"This field may not be blank.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>return_url is invalid</p> <pre><code>{\n\"return_url\": [\n\"Enter a valid URL.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>website_url is blank</p> <pre><code>{\n\"website_url\": [\n\"This field may not be blank.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>website_url is invalid</p> <pre><code>{\n\"website_url\": [\n\"Enter a valid URL.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>Amount is less than 10</p> <pre><code>{\n\"amount\": [\n\"Amount should be greater than Rs. 1, that is 100 paisa.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>Amount is invalid</p> <pre><code>{\n\"amount\": [\n\"A valid integer is required.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>purchase_order_id is blank</p> <pre><code>{\n\"purchase_order_id\": [\n\"This field may not be blank.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>purchase_order_name is blank</p> <pre><code>{\n\"purchase_order_name\": [\n\"This field may not be blank.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre> <p>Amount breakdown doesn't total to the amount passed</p> <pre><code>{\n\"amount\": [\n\"Amount Breakdown mismatch.\"\n],\n\"error_key\": \"validation_error\"\n}\n</code></pre>"},{"location":"khalti-epayment/#payment-success-callback","title":"Payment Success Callback","text":"<p>After the user completes the payment, the success response is obtained in the return URL specified during payment initiate. Sample of success response return URL. </p> <ul> <li>The callback url <code>return_url</code> should support <code>GET</code> method</li> <li>User shall be redirected to the <code>return_url</code> with following parameters for confirmation<ul> <li>pidx - The initial payment identifier</li> <li>transaction_id - _The transaction identifier at Khalti after successful payment</li> <li>amount - Amount paid in paisa</li> <li>mobile - Payer Mobile</li> <li>purchase_order_id - The initial purchase_order_id provided during payment initiate</li> <li>purchase_order_name - The initial purchase_order_name provided during payment initiate</li> </ul> </li> <li>There is no further step required to complete the payment, however merchant can process with their own validation and confirmation steps if required</li> <li>It's recommended that during implementation, payment lookup API is checked for confirmation after the redirect callback is received</li> </ul>"},{"location":"khalti-epayment/#sample-callback-request","title":"Sample Callback Request","text":"<pre><code>https://example.com/payment?pidx=EwGKrbdaYLTQ4rmWtNAMEJ\n    &amp;amount=1300\n    &amp;mobile=98XXXXX403\n    &amp;purchase_order_id=test12\n    &amp;purchase_order_name=test\n    &amp;transaction_id=MJbBJDKYziWqgvkgjxhS2W\n</code></pre>"},{"location":"khalti-epayment/#payment-failure-callback","title":"Payment Failure Callback","text":"<p>If, in-case, due to some problem, user transaction does not go through, the failure response is obtained in the return URL specified during payment initiate. Sample of failure response return URL. </p> <ul> <li>The callback url <code>return_url</code> should support <code>GET</code> method</li> <li>User shall be redirected to the <code>return_url</code> with following parameters for confirmation<ul> <li>message - Failure message</li> </ul> </li> </ul>"},{"location":"khalti-epayment/#sample-callback-request_1","title":"Sample Callback Request","text":"<pre><code>https://example.com/payment?message=Could%20not%20process%20the%20payment.\n</code></pre>"},{"location":"khalti-epayment/#payment-verification-lookup","title":"Payment Verification (Lookup)","text":"<p>After a callback is received, You can use the <code>pidx</code> provided earlier, to lookup and reassure the payment status.</p> URL Method Authorization Format /epayment/lookup/ POST Required application/json"},{"location":"khalti-epayment/#request-data","title":"Request Data","text":"<pre><code>{\n\"pidx\": \"HT6o6PEZRWFJ5ygavzHWd5\"\n}\n</code></pre>"},{"location":"khalti-epayment/#success-response","title":"Success Response","text":"<pre><code>{\n\"pidx\": \"HT6o6PEZRWFJ5ygavzHWd5\",\n\"total_amount\": 1000,\n\"status\": \"Completed\",\n\"transaction_id\": \"GFq9PFS7b2iYvL8Lir9oXe\",\n\"fee\": 0,\n\"refunded\": false\n}\n</code></pre>"},{"location":"khalti-epayment/#failed-pending-response","title":"Failed / Pending  Response","text":"<pre><code>{\n\"pidx\": \"HT6o6PEZRWFJ5ygavzHWd5\",\n\"total_amount\": 1000,\n\"status\": \"Pending\",\n\"transaction_id\": \"GFq9PFS7b2iYvL8Lir9oXe\",\n\"fee\": 0,\n\"refunded\": false\n}\n</code></pre>"},{"location":"khalti-epayment/#refunded-response","title":"Refunded  Response","text":"<pre><code>{\n\"pidx\": \"HT6o6PEZRWFJ5ygavzHWd5\",\n\"total_amount\": 1000,\n\"status\": \"Refunded\",\n\"transaction_id\": \"GFq9PFS7b2iYvL8Lir9oXe\",\n\"fee\": 0,\n\"refunded\": true\n}\n</code></pre>"},{"location":"khalti-epayment/#expired-response","title":"Expired Response","text":"<pre><code>{\n\"pidx\": \"H889Er9gq4j92oCrePrDwf\",\n\"total_amount\": 1000,\n\"status\": \"Expired\",\n\"transaction_id\": null,\n\"fee\": 0,\n\"refunded\": false\n}\n</code></pre> <p>Note</p> <p>Links expire in 60 minutes in production.</p>"},{"location":"khalti-epayment/#lookup-payload-details","title":"Lookup Payload Details","text":"Field Description -- pidx This is the payment id of the transaction. total_amount This is the total amount of the transaction status <code>Completed</code> - Transaction is success <code>Pending</code> - Transaction is failed or is in pending state <code>Refunded</code> - Transaction has been refunded transaction_id This is the transaction id for the transaction. This is the unique identifier. fee The fee that has been set for the merchant. refunded <code>True</code> - The transaction has been refunded. <code>False</code> - The transaction has not been refunded."},{"location":"khalti-epayment/#generic-errors","title":"Generic Errors","text":""},{"location":"khalti-epayment/#when-an-incorrect-authorization-key-is-passed","title":"When an incorrect Authorization key is passed.","text":"<pre><code>{\n\"detail\": \"Invalid token.\",\n\"status_code\": 401\n}\n</code></pre>"},{"location":"khalti-epayment/#if-incorrect-payment_id-is-passed","title":"If incorrect payment_id is passed.","text":"<pre><code>{\n\"detail\": \"Not found.\",\n\"error_key\": \"validation_error\"\n}\n</code></pre>"},{"location":"resources/","title":"Learn more about Khalti integration","text":"<p>Here are few demo projects and resources in various plaforms.</p>"},{"location":"resources/#official-resources","title":"Official Resources","text":"<ul> <li>Khalti Javascript SDK</li> <li>Khalti Android SDK</li> <li>Khalti iOS SDK</li> <li>Khalti Flutter SDK</li> <li>Khalti WooCommerce Plugin</li> <li>Khalti Opencart Plugin</li> <li>Khalti PrestaShop Plugin</li> <li>Khalti Mangeto 2 Plugin </li> <li>WHMCS Khalti Gateway Plugin</li> <li>Khalti Docs Repository</li> </ul>"},{"location":"resources/#related-projects","title":"Related Projects","text":"<ul> <li>Ruby Wrapper of Khalti Payment API</li> <li>Vuejs component of Khalti SDK</li> </ul>"},{"location":"resources/#example-projects","title":"Example Projects","text":"<ul> <li>Web Example, Client side with Vuejs, Server side with Flask(python) and Nodejs(express)</li> <li>Khalti Checkout Implementation with PHP</li> <li>Khalti checkout with angular5</li> <li>iOS SDK Objective C Example</li> <li>iOS SDK Swift Example</li> <li>Android SDK Example</li> <li>Prestashop Docker Example</li> <li>Opencart Docker Example</li> <li>WooCommerce Docker Example yml</li> <li>Khalti integration for Laravel</li> <li>Khalti Flutter SDK Example (Default Payment Interface)</li> <li>Khalti Flutter SDK Example (Custom Payment Interface)</li> </ul> <p>If you want to list your resource please check contribution guide or contact khalti merchant support</p>"},{"location":"api/transaction/","title":"Transaction list","text":"<p>Khalti provides API for retrieving list of payments made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment list respectively.</p> <p>List of transactions can also be viewed after logging on Khalti website with merchant account.</p> <p>Replace <code>&lt;secret key&gt;</code> with test or live secret key as per required.</p> <p>Response is paginated and in the following format:</p> <pre><code>{\n\"total_pages\": 1,\n\"total_records\": 2,\n\"next\": null,\n\"previous\": null,\n\"record_range\": [\n1,\n2\n],\n\"current_page\": 1,\n\"records\": [\n{\n\"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\",\n\"type\": {\n\"idx\": \"e476BL6jt9kgagEmsakyTL\",\n\"name\": \"Wallet payment\"\n},\n\"state\": {\n\"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\",\n\"name\": \"Completed\",\n\"template\": \"is complete\"\n},\n\"amount\": 1000,\n\"fee_amount\": 30,\n\"refunded\": false,\n\"created_on\": \"2018-06-20T14:48:08.867125+05:45\",\n\"ebanker\": null,\n\"user\": {\n\"idx\": \"cCaPkRPQGn5D8StkiqqMJg\",\n\"name\": \"Test User\",\n\"mobile\": \"98XXXXXXX9\"\n},\n\"merchant\": {\n\"idx\": \"UM75Gm2gWmZvA4TPwkwZye\",\n\"name\": \"Test Merchant\",\n\"mobile\": \"testmerchant@khalti.com\"\n}\n},\n{\n\"idx\": \"eWAyLgv9N6FjGnwYqhLpXC\",\n\"type\": {\n\"idx\": \"e476BL6jt9kgagEmsakyTL\",\n\"name\": \"Wallet payment\"\n},\n\"state\": {\n\"idx\": \"Dhvaj9hdRufLqkP8ZY4d8g\",\n\"name\": \"Confirmed\",\n\"template\": \"is confirm\"\n},\n\"amount\": 10000,\n\"fee_amount\": 0,\n\"refunded\": false,\n\"created_on\": \"2018-07-06T16:54:33.361956+05:45\",\n\"ebanker\": null,\n\"user\": {\n\"idx\": \"cCaPkRPQGn5D8StkiqqMJg\",\n\"name\": \"Test User\",\n\"mobile\": \"98XXXXXXX9\"\n},\n\"merchant\": {\n\"idx\": \"UM75Gm2gWmZvA4TPwkwZye\",\n\"name\": \"Test Merchant\",\n\"mobile\": \"testmerchant@khalti.com\"\n}\n}\n]\n}\n</code></pre>"},{"location":"api/transaction/#api-request-examples","title":"API Request Examples","text":"cURLphpPythonRuby <pre><code>curl https://khalti.com/api/v2/merchant-transaction/ \\\n-H \"Authorization:Key &lt;secret key&gt;\n</code></pre> <pre><code>&lt;?php\n$url = \"https://khalti.com/api/v2/merchant-transaction/\";\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n</code></pre> <pre><code>import requests\nurl = \"https://khalti.com/api/v2/merchant-transaction/\"\npayload = {}\nheaders = {\n\"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\nresponse = requests.get(url, payload, headers = headers)\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\nheaders = {\nAuthorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\nputs response.body\n</code></pre>"},{"location":"api/transaction_details/","title":"Transaction detail","text":"<p>Khalti provides API for retrieving payment made to a merchant. A merchant should use secret test and live keys for retrieving test and live payment respectively.</p> <p> Payment details can also be viewed after logging on Khalti website with merchant account.</p> <p>Replace <code>&lt;secret key&gt;</code> with test or live secret key as per required.</p> <p>Response is in the following format:</p> <pre><code>{\n\"idx\": \"xeR2tuRqEvBLmeJcZzMb5U\",\n\"type\": {\n\"idx\": \"2jwzDS9wkxbkDFquJqfAEC\",\n\"name\": \"Wallet payment\"\n},\n\"state\": {\n\"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\",\n\"name\": \"Completed\",\n\"template\": \"is complete\"\n},\n\"amount\": 3000,\n\"fee_amount\": 90,\n\"created_on\": \"2018-04-16T17:04:05.204629+05:45\",\n\"can_refund\": true,\n\"can_complete\": false,\n\"ebanker\": null,\n\"user\": {\n\"idx\": \"aVPXfJQ8HMYKhAePAU6pg5\",\n\"name\": \"Test User\",\n\"mobile\": \"98XXXXXXX9\"\n},\n\"merchant\": {\n\"idx\": \"UM75Gm2gWmZvA4TPwkwZye\",\n\"name\": \"Test Merchant\",\n\"mobile\": \"testmerchant@khalti.com\"\n},\n\"refunded\": false,\n\"child_transactions\": [\n{\n\"idx\": \"uUx2Ead8qqDuRufYh8vsYj\",\n\"type\": {\n\"idx\": \"YpwbDVqAnH42odGZmT5vZ8\",\n\"name\": \"Fee\"\n},\n\"state\": {\n\"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\",\n\"name\": \"Completed\",\n\"template\": \"is complete\"\n},\n\"amount\": 90,\n\"fee_amount\": 0,\n\"created_on\": \"2018-07-19T12:31:55.620318+05:45\",\n\"can_refund\": true,\n\"can_complete\": false,\n\"ebanker\": null,\n\"user\": {\n\"idx\": \"UM75Gm2gWmZvA4TPwkwZye\",\n\"name\": \"Test Merchant\",\n\"mobile\": \"testmerchant@khalti.com\"\n},\n\"merchant\": {\n\"idx\": \"9dUzuqrLetWo9VY3fNwB2E\",\n\"name\": \"\",\n\"mobile\": \"wallet@khalti.com\"\n},\n\"refunded\": false,\n\"child_transactions\": [],\n\"meta\": null\n}\n],\n\"meta\": {\n\"product_identity\": \"369121518\",\n\"product_name\": \"Test Product\",\n\"product_url\": \"http://testproduct.com/wiki/khalti\"\n}\n}\n</code></pre>"},{"location":"api/transaction_details/#api-request-examples","title":"API Request Examples","text":"cURLphpPythonRuby <pre><code>curl https://khalti.com/api/v2/merchant-transaction/&lt;idx&gt;/ \\\n-H \"Authorization:Key &lt;secret key&gt;\n</code></pre> <pre><code>&lt;?php\n$url = \"https://khalti.com/api/v2/merchant-transaction/&lt;idx&gt;/\";\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n</code></pre> <pre><code>import requests\nurl = \"https://khalti.com/api/v2/merchant-transaction/&lt;idx&gt;/\"\nheaders = {\n\"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\nresponse = requests.get(url, headers = headers)\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\nheaders = {\nAuthorization: \"Key live_secret_key_fc1207298be544b99fa3ad41c7d7b324\"\n}\nuri = URI.parse(\"https://khalti.com/api/v2/merchant-transaction/&lt;idx&gt;/\")\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri, headers)\nresponse = https.request(request)\nputs response.body\n</code></pre>"},{"location":"api/transaction_status/","title":"Transaction Status","text":"<p>Khalti provides API for transaction status/lookup to check the state of the user's transaction made to the merchant. A merchant should use secret test and live keys to check test and live transaction status respectively.</p>"},{"location":"api/transaction_status/#api","title":"API","text":"<p>The request signature for transaction lookup is as follows:</p> <ul> <li><code>URL</code>: <code>https://khalti.com/api/v2/payment/status/</code></li> <li><code>Method</code>: <code>GET</code></li> <li>Headers: <ul> <li><code>Authorization</code>: test or live secret key in the form <code>Key &lt;secret key&gt;</code></li> </ul> </li> <li>Params:<ul> <li><code>token</code>: Token or idx given by Khalti after payment confirmation.</li> <li><code>amount</code>: Amount (in paisa) with which payment was initiated.</li> </ul> </li> </ul>"},{"location":"api/transaction_status/#responses","title":"Responses","text":"<p>Once you've made a request as specified above, Khalti server will return you a response of Transaction States in the following format.</p>"},{"location":"api/transaction_status/#success-response","title":"Success Response","text":"<p>Success response consists of the <code>Complete</code> state.</p>"},{"location":"api/transaction_status/#completed-state","title":"Completed State","text":"<pre><code>{\n\"status\": true,\n\"detail\": \"Transaction complete.\",\n\"state\": \"Complete\"\n}\n</code></pre>"},{"location":"api/transaction_status/#error-response","title":"Error Response","text":""},{"location":"api/transaction_status/#1-transaction-not-found","title":"1. Transaction Not Found","text":"<p>An error occurs, if wrong token/idx or wrong amount is passed in the parameter. It consist of the detail of error.</p> <pre><code>{\n\"status\": false,\n\"state\": \"Error\",\n\"detail\": \"Transaction not found\"\n}\n</code></pre>"},{"location":"api/transaction_status/#2-failed-state","title":"2. Failed State","text":"<p>A transaction could be failed due to the possibility of 'confirmation_code' exploitation.</p> <pre><code>{\n\"status\": false,\n\"detail\": \"Transaction failed.\",\n\"state\": \"Failed\"\n}\n</code></pre>"},{"location":"api/transaction_status/#other-responses","title":"Other Responses","text":""},{"location":"api/transaction_status/#1-initiated-state","title":"1. Initiated State","text":"<p>Transactions are initiated after mobile number and khalti pin along with other transaction details are provided.</p> <pre><code>{\n\"status\": true,\n\"detail\": \"Transaciton initiated.\",\n\"state\": \"Initiated\"\n}\n</code></pre>"},{"location":"api/transaction_status/#2-confirmed-state","title":"2. Confirmed State","text":"<p>A transaction is confirmed after transaction details (transaction token, confirmation_code and 3rd party transaction_pin) are provided by the consumer.</p> <pre><code>{\n\"status\": true,\n\"detail\": \"Transaciton not verified.\",\n\"state\": \"Confirmed\"\n}\n</code></pre>"},{"location":"api/transaction_status/#3-refunded-state","title":"3. Refunded State","text":"<pre><code>{\n\"status\": false,\n\"detail\": \"Transaciton refunded.\",\n\"state\": \"Refunded\"\n}\n</code></pre>"},{"location":"api/transaction_status/#4-partially-refunded-state","title":"4. Partially Refunded State","text":"<pre><code>{\n\"status\": false,\n\"detail\": \"Transaction partially refunded.\",\n\"state\": \"Partially refunded\"\n}\n</code></pre>"},{"location":"api/transaction_status/#example-requests","title":"Example Requests","text":"<p>Assuming the token/idx that we received is <code>XPPrDcwtHUg4UQbWEnxRzA</code>.</p> PythonNode.js <pre><code>import requests\nurl = \"https://khalti.com/api/v2/payment/status/\"\nparams = {\n\"token\": \"XPPrDcwtHUg4UQbWEnxRzA\",\n\"amount\": 1000\n}\nheaders = {\n\"Authorization\": \"Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\"\n}\nresponse = requests.get(url, params, headers = headers)\n</code></pre> <pre><code>const axios = require('axios');\nlet data = {\n\"token\": \"XPPrDcwtHUg4UQbWEnxRzA\",\n\"amount\": 1000\n};\nlet config = {\nheaders: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'}\n};\naxios.get(\"https://khalti.com/api/v2/payment/status/\", data, config)\n.then(response =&gt; {\nconsole.log(response.data);\n})\n.catch(error =&gt; {\nconsole.log(error);\n});\n</code></pre>"},{"location":"api/verification/","title":"Verification","text":""},{"location":"api/verification/#introduction","title":"Introduction","text":"<p>Whenever your customer pays using the Khalti widget, the client side makes a request to the Khalti server to initiate and confirm the payment.</p> <p>Once they've confirmed the payment, the client will receive a response containing unique token and amount for that particular transaction. Upon receiving the transaction token, the client will make a request to your server with the token and the payment amount.</p> <p>On the next step, you will need to ask the Khalti server to verify the information relayed by the user before completing their purchase order.</p>"},{"location":"api/verification/#why-is-server-to-server-verification-necessary","title":"Why is server-to-server verification necessary?","text":"<p>Since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server.</p>"},{"location":"api/verification/#verification-request","title":"Verification request","text":"<p>Your application server must do a <code>POST</code> request to Khalti server for the final step of the payment process. The structure of the request as expected by Khalti server is as follows.</p> <ul> <li><code>url</code>: <code>https://khalti.com/api/v2/payment/verify/</code></li> <li><code>method</code>: <code>POST</code></li> <li><code>headers</code>:<ul> <li><code>Authorization</code>: test or live secret key in the form <code>Key &lt;secret key&gt;</code></li> </ul> </li> <li><code>payload</code>:<ul> <li><code>token</code>: Token given by Khalti after payment confirmation.</li> <li><code>amount</code>: Amount (in paisa) with which payment was initiated. </li> </ul> </li> </ul> <p>Important</p> <p>Cross check the amount from client side to amount from server.</p> <p>Disclaimer</p> <p>If any negative consequences occur due to incomplete API integration, Khalti won\u2019t be liable for any such losses.</p>"},{"location":"api/verification/#verification-response","title":"Verification response","text":"<p>Once you've made a request as specified above, Khalti server will return you a response in the following format.</p> <p><code>Success</code>: Success response consists of the transaction record.</p> <pre><code>{\n\"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\",\n\"type\": {\n\"idx\": \"e476BL6jt9kgagEmsakyTL\",\n\"name\": \"Wallet payment\"\n},\n\"state\": {\n\"idx\": \"DhvMj9hdRufLqkP8ZY4d8g\",\n\"name\": \"Completed\",\n\"template\": \"is complete\"\n},\n\"amount\": 1000,\n\"fee_amount\": 30,\n\"refunded\": false,\n\"created_on\": \"2018-06-20T14:48:08.867125+05:45\",\n\"ebanker\": null,\n\"user\": {\n\"idx\": \"cCaPkRPQGn5D8StkiqqMJg\",\n\"name\": \"Test User\",\n\"mobile\": \"98XXXXXXX9\"\n},\n\"merchant\": {\n\"idx\": \"UM75Gm2gWmZvA4TPwkwZye\",\n\"name\": \"Test Merchant\",\n\"mobile\": \"testmerchant@khalti.com\"\n}\n}\n</code></pre> <p><code>Error</code>: Error response consists of the detail of errors.</p> <pre><code>{'token': ['Invalid token.']}\n</code></pre>"},{"location":"api/verification/#examples","title":"Examples","text":"<p>Assuming the token that we received is <code>QUao9cqFzxPgvWJNi9aKac</code>.</p> cURLphpPythonRubyNode.js <pre><code>curl https://khalti.com/api/v2/payment/verify/ \\\n-H \"Authorization:Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b\" \\\n-d amount=1000 \\\n-d token=QUao9cqFzxPgvWJNi9aKac\n</code></pre> <pre><code>&lt;?php\n$args = http_build_query(array(\n'token' =&gt; 'QUao9cqFzxPgvWJNi9aKac',\n'amount'  =&gt; 1000\n));\n$url = \"https://khalti.com/api/v2/payment/verify/\";\n# Make the call using API.\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS,$args);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$headers = ['Authorization: Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'];\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n// Response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\ncurl_close($ch);\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\nurl = \"https://khalti.com/api/v2/payment/verify/\"\npayload = {\n'token': 'QUao9cqFzxPgvWJNi9aKac',\n'amount': 1000\n}\nheaders = {\n'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\nheaders = {\nAuthorization: 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'\n}\nuri = URI.parse('https://khalti.com/api/v2/payment/verify/')\nhttps = Net::HTTP.new(uri.host, uri.port)\nhttps.use_ssl = true\nrequest = Net::HTTP::Post.new(uri.request_uri, headers)\nrequest.set_form_data('token' =&gt; 'QUao9cqFzxPgvWJNi9aKac', 'amount' =&gt; 1000)\nresponse = https.request(request)\nputs response.body\n</code></pre> <pre><code>const axios = require('axios');\nlet data = {\n\"token\": \"QUao9cqFzxPgvWJNi9aKac\",\n\"amount\": 1000\n};\nlet config = {\nheaders: {'Authorization': 'Key test_secret_key_f59e8b7d18b4499ca40f68195a846e9b'}\n};\naxios.post(\"https://khalti.com/api/v2/payment/verify/\", data, config)\n.then(response =&gt; {\nconsole.log(response.data);\n})\n.catch(error =&gt; {\nconsole.log(error);\n});\n</code></pre>"},{"location":"checkout/android/","title":"Android SDK","text":""},{"location":"checkout/android/#khalti-android-sdk","title":"Khalti Android SDK","text":"<p>Welcome to Khalti's checkout documentation</p>"},{"location":"checkout/android/#installation","title":"Installation","text":""},{"location":"checkout/android/#requirements","title":"Requirements","text":"<ul> <li>Android 5.0 and above</li> <li>AndroidX (as of v2.00.00)</li> <li>Android Studio 3 and above</li> </ul>"},{"location":"checkout/android/#quick-note","title":"Quick Note","text":"<ul> <li>We've dropped support of Android 4 since version <code>2.01.00</code></li> </ul>"},{"location":"checkout/android/#configuration","title":"Configuration","text":"<p>Add <code>khalti-android</code> to your <code>build.gradle</code> dependencies</p> <pre><code>implementation ('com.khalti:khalti-android:$latest_version') {\n        transitive = true\n    }\n</code></pre> <p>Also add the following lines inside the <code>android</code> block of your <code>build.gradle</code> file</p> <pre><code>compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n   }\n</code></pre> <p>Disable R8 by adding the following lines inside your <code>gradle.properties</code></p> <pre><code>android.enableR8 = false\n</code></pre>"},{"location":"checkout/android/#setup","title":"Setup","text":"<p>Add KhaltiButton in your xml layout as follows</p> <pre><code>&lt;com.khalti.widget.KhaltiButton\nandroid:id=\"@+id/khalti_button\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\napp:khalti_button_style=\"khalti\"/&gt;\n</code></pre> <p>Add the following line in your root layout in your xml file if you're going to use <code>khalti</code> attribute.</p> <pre><code>xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n</code></pre> <p>Then, Locate your xml Khalti Button in your Java</p> <pre><code>KhaltiButton khaltiButton = (KhaltiButton) findViewById(R.id.khalti_button);\n</code></pre>"},{"location":"checkout/android/#xml-attribute","title":"XML Attribute","text":"Attribute Description <code>app:text</code> Text to display <code>app:khalti_button_style</code> Set the style of KhaltiButton from the available options <p>Use the <code>khalti_button_style</code> attribute in your xml file to select a button style for your Khalti button. Or you can use the  <code>setButtonStyle()</code> function in khalti button to set the style programmatically.</p>"},{"location":"checkout/android/#available-button-styles","title":"Available button styles","text":"Button style Image basic khalti e_banking m_banking sct connect_ips <p>Alternatively you can also inflate KhaltiButton in your java class as follows</p> <pre><code>KhaltiButton khaltiButton = new KhaltiButton();\n</code></pre> <p>In order for Khalti button to be functional you'll need to pass an instance of <code>Config</code>.</p>"},{"location":"checkout/android/#building-config","title":"Building Config","text":"<p>Create an instance of Builder class. Pass <code>public key</code>, <code>product id</code>, <code>product name</code>, <code>amount (in paisa)</code> and an implementation of <code>OnCheckOutListener</code> to the builder constructor.</p> <pre><code>Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\nmap.put(\"merchant_extra\", \"This is extra data\");\nBuilder builder = new Config.Builder(Constant.pub, \"Product ID\", \"Main\", 1100L, new OnCheckOutListener() {\n@Override\npublic void onError(@NonNull String action, @NonNull Map&lt;String, String&gt; errorMap) {\nLog.i(action, errorMap.toString());\n}\n@Override\npublic void onSuccess(@NonNull Map&lt;String, Object&gt; data) {\nLog.i(\"success\", data.toString());\n}\n})\n.paymentPreferences(new ArrayList&lt;PaymentPreference&gt;() {{\nadd(PaymentPreference.KHALTI);\nadd(PaymentPreference.EBANKING);\nadd(PaymentPreference.MOBILE_BANKING);\nadd(PaymentPreference.CONNECT_IPS);\nadd(PaymentPreference.SCT);\n}})\n.additionalData(map)\n.productUrl(\"http://example.com/product\")\n.mobile(\"9800000000\");\n</code></pre> <p>Here, the functions <code>paymentPreferences()</code>,<code>additionalData()</code>,<code>productUrl()</code> and <code>mobile()</code> are optional and are not required to build the config. When passing additionalData through <code>additionalData()</code> functions make sure you add a <code>merchant_</code> prefix in your map key.</p> <p>Finally, call the <code>build()</code> function in builder to build the config.</p> <pre><code>Config config = builder.build();\n</code></pre>"},{"location":"checkout/android/#available-config-builder-methods","title":"Available Config Builder Methods","text":"Constraint Method Description Optional <code>paymentPreference()</code> Set which payment option tabs are to be shown Optional <code>additionalData()</code> Set additional data Optional <code>productUrl()</code> Add url of product Optional <code>mobile()</code> Preset mobile number in mobile field Required <code>build()</code> Build config"},{"location":"checkout/android/#available-payment-preferences","title":"Available payment preferences","text":"Preferences Description <code>PaymentPreference.KHALTI</code> Show Khalti payment tab <code>PaymentPreference.EBANKING</code> Show E-banking payment tab <code>PaymentPreference.MOBILE_BANKING</code> Show Mobile banking payment tab <code>PaymentPreference.CONNECT_IPS</code> Show Connect IPS payment tab <code>PaymentPreference.SCT</code> Show SCT card payment tab"},{"location":"checkout/android/#set-config","title":"Set Config","text":"<p>Set your config in your KhaltiButton.</p> <pre><code>khaltiButton.setCheckOutConfig(config);\n</code></pre>"},{"location":"checkout/android/#public-methods-in-khaltibutton","title":"Public Methods in KhaltiButton","text":"Constraint Method Description Required <code>setCheckOutConfig(Config config)</code> Set configuration required by Khalti checkout Optional <code>setText(String text)</code> Set text to display in KhaltiButton Optional <code>setCustomView(View view)</code> Replace KhaltiButton's default view with your custom view Optional <code>setButtonStyle(ButtonStyle buttonStyle)</code> Select between the available options to set KhaltiButton's style"},{"location":"checkout/android/#callback-methods","title":"Callback Methods","text":"Method Description <code>onSuccess(Map data)</code> This method is called when a transaction has been completed and confirmed by the user. A map containing an access token, required to verify the transaction and data passed to the Config through the Config bulder is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. <code>onError(String action, Map errorMap)</code> This method is called when an error occurs during payment initiation or confirmation. Action and errorMap value is passed where action defines the current action being performed and errorMap has the necessary information on the error. <code>onCancel()</code> This method is called when the user dismisses or cancels the checkout process. (When the user presses back button)."},{"location":"checkout/android/#response-sample","title":"Response Sample","text":""},{"location":"checkout/android/#success-message","title":"Success Message","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url(if passed) Product Url String amount 100 Long token token String idx Unique identifier String <p>The success message also contains all the <code>key</code> and <code>value</code> provided as extra data while building the <code>Config</code>.</p>"},{"location":"checkout/android/#error-message","title":"Error Message","text":"Variable Description Type action Action performed - (initiate, confirm) String errorMap Detail Error map Map"},{"location":"checkout/android/#more-implementations","title":"More Implementations","text":""},{"location":"checkout/android/#method-1-with-custom-click-listener","title":"Method 1: With Custom Click Listener","text":"<p>Initialize the KhaltiCheckout Object</p> <pre><code>KhaltiCheckOut khaltiCheckOut = new KhaltiCheckOut(this, config);\n</code></pre> <p>Use <code>khaltiCheckout.show()</code> to display Khalti widget</p> <pre><code>khaltiButton.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View view) {\nkhaltiCheckOut.show();\n}\n});\n</code></pre>"},{"location":"checkout/android/#method-2-with-custom-view","title":"Method 2: With Custom View","text":"<p>Get your custom view</p> <pre><code>View view = LayoutInflater.from(this).inflate(R.layout.custom_khalti_button, container, false);\n</code></pre> <p>Set custom view to your khalti button</p> <pre><code>khaltiButton.setCustomView(view);\nkhaltiButton.setCheckOutConfig(config);\n</code></pre> <p>Check out the source for Khalti checkout on Github.</p> <p>Check out the Verification process.</p>"},{"location":"checkout/android/#changelog","title":"Changelog","text":""},{"location":"checkout/android/#screenshots","title":"Screenshots","text":""},{"location":"checkout/diy-banking/","title":"Introduction","text":"<p>This document explains the various requests to implement banking payment system using Khalti.</p> <p>First and foremost, please read the docs at http://docs.khalti.com to understand the basic workflow of the merchant API.</p>"},{"location":"checkout/diy-banking/#api","title":"API","text":""},{"location":"checkout/diy-banking/#1-get-bank-list","title":"1. Get Bank List","text":"<p>This API provides the bank list. The request signature for initiation is as follows:</p> <ul> <li>URL: <code>https://khalti.com/api/bank/?has_ebanking=true</code></li> <li>Method: <code>GET</code></li> </ul> <p>The response contains list of banks with the details as shown below.</p> <pre><code>{ ...\n\"records\": [\n{\n\"idx\":  \"Yy6jFwuwssihs77PHGjwAZ\",\n\"name\": \"&lt;Bank Name&gt;\",\n\"short_name\":   \"&lt;Truncated Name&gt;\",\n\"logo\":     \"&lt;logo source&gt;\",\n\"has_cardpayment\":  false,\n\"address\":  \"&lt;Bank address&gt;\",\n\"has_ebanking\": true,\n\"has_direct_withdraw\":  false,\n\"has_nchl\": false,\n\"has_mobile_banking\":   false,\n\"play_store\":   \"\",\n\"app_store\": \"\"\n}\n]\n}\n</code></pre>"},{"location":"checkout/diy-banking/#2-initiate-transaction","title":"2. Initiate transaction","text":"<p>As the title says, this API is called to initiates the transaction.</p> <p>E.g. When the user clicks <code>Checkout</code> button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits.</p> <p>The request signature for initiation is as follows:</p> <ul> <li>URL: <code>https://khalti.com/ebanking/initiate/</code></li> <li>Method: <code>POST</code></li> <li>Data:</li> <li><code>public_key</code>: Required. Either <code>test</code> or <code>live</code> public key.</li> <li><code>mobile</code>: Required. The Khalti registered mobile number of payer.</li> <li><code>amount</code>: Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10.</li> <li><code>product_identity</code>: Required. A string to identify the product.</li> <li><code>product_name</code>: Required. Descriptive name for the product.false</li> <li><code>bank</code>:Required.A bank idx,</li> <li><code>source</code>:Required. web, android, ios, or custom,</li> <li><code>return_url</code>:Optional. It is required if <code>source</code> key is <code>custom</code> or <code>ios</code>.</li> <li><code>payment_type</code>: Possible values: <code>connectips</code> or <code>ebanking</code> or <code>mobilecheckout</code> or <code>sct</code></li> </ul> <p><code>return_url</code> for ios platform creates a url scheme for browser to open current app and if for custom redirects window to this url with data,</p> <p>Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with <code>merchant_</code>.</p> <p>A sample request adhering to the above signature will look something like this:</p> <pre><code>{\n\"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n\"mobile\": \"9842XXXXXX\",\n\"amount\": 10000,\n\"product_identity\": \"book/id-120\",\n\"product_name\": \"A Song of Ice and Fire\",\n\"bank\": \"Yy6jFwuwssihs77PHGjwAZ\",\n\"source\": \"web\"\n}\n</code></pre> <p>With this request khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response.</p>"},{"location":"checkout/diy-banking/#data-retrival","title":"Data Retrival","text":"<p>Once transaction is initated, user interacts with banking system. After transaction is completed getting success or failure response is tricky. There are different ways based on different <code>source</code>.</p> <p>Android</p> <p>For <code>android</code> it returns data with the intent <pre><code>intent://ebanking/#Intent;scheme=khalti;package=&lt;return_url&gt;;S.data=&lt;data&gt;;S.browser_fallback_url=https://khalti.com/;end\n</code></pre> IOS</p> <p>For <code>ios</code> you need to provide return_url and response data is binded with it. Finally, custom url for the action is <pre><code>&lt;return_url&gt;://?&lt;data&gt;\n</code></pre> Custom</p> <p>If you have provided return url and source as custom as following:</p> <p><pre><code>{\n...\n\"return_url\": \"http://example.bookshop.com/\",\n\"source\": \"custom\"\n}\n</code></pre> You will then get redirection to return_url with data as below.</p> <p><pre><code>&lt;return_url&gt;/?&lt;data&gt;\n</code></pre> Web</p> <p>And with <code>web</code> response data is stored in local storage with</p> <p><code>localstorage.setItem(\"confirmation-data\", {{data}})</code></p> <p>The <code>storage</code> event is fired when a storage area (localStorage or sessionStorage) has been modified. So, while implementing it needs to listen the <code>storage</code> event and read localstorage  value as data with the key <code>confirmation-data</code>. The example is like this: <pre><code>window.addEventListener(\"storage\", function (event) {\n  if (event.key == \"confirmation-data\") {\n    data = JSON.parse(event.newValue);\n    // this is the final response with looks json shown below\n    window.localStorage.removeItem(\"confirmation-data\");\n  }\n});\n</code></pre></p> <p>Finally, a successful request will yield a response that looks something like this:</p> <pre><code>{\n\"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n\"amount\": 10000,\n\"mobile\": \"98XXXXX099\",\n\"product_identity\": \"book/id-120\",\n\"product_name\": \"A Song of Ice and Fire\"\n}\n</code></pre>"},{"location":"checkout/diy-banking/#3-verify-transaction","title":"3. Verify transaction","text":"<p>The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you need to make a verification request using your secret key from the server.</p> <p>See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.</p>"},{"location":"checkout/diy-banking/#notes","title":"Notes","text":"<ol> <li>While testing you might need to interact with actual system of banks. There is no sandbox or testing environment for using banking system.</li> <li>Prevent parent page (that initiates redirection) for closing until payment process is not completed. You will not get final response unless bank portal provides success/response message.</li> </ol>"},{"location":"checkout/diy-wallet/","title":"Introduction","text":"<p>Read this documentation only if you plan to implement your own SDK instead of using the ones provided by Khalti.</p> <p>If you are not sure about that, please check our SDK for Android, iOS and Web platforms.</p> <p>Before starting out, read the rest of the documentation at http://docs.khalti.com to understand the basic workflow of the merchant API.</p>"},{"location":"checkout/diy-wallet/#api","title":"API","text":""},{"location":"checkout/diy-wallet/#1-initiate-transaction","title":"1. Initiate transaction","text":"<p>As the title says, this API is called to initiates the transaction.</p> <p>E.g. When the user clicks <code>Checkout</code> button, you will need to prompt for their Khalti registered mobile number, and call this API once the payer submits.</p> <p>The request signature for initiation is as follows:</p> <ul> <li>URL: <code>https://khalti.com/api/v2/payment/initiate/</code></li> <li>Method: <code>POST</code></li> <li>Data:</li> <li><code>public_key</code>: Required. Either <code>test</code> or <code>live</code> public key.</li> <li><code>mobile</code>: Required. The Khalti registered mobile number of payer.</li> <li><code>transaction_pin</code>: Required. Third party khalti pin submitted by the user.</li> <li><code>amount</code>: Required. The amount value of payment. Amount must be in paisa and greater than equal to 1000 i.e Rs 10.</li> <li><code>product_identity</code>: Required. A string to identify the product.</li> <li><code>product_name</code>: Required. Descriptive name for the product.</li> <li><code>product_url</code>: Optional. Url of the product.</li> </ul> <p>Additional information about the product can be passed along with this for reporting purposes. The keys for additional data must be prefixed with <code>merchant_</code>.</p> <p>A sample request adhering to the above signature will look something like this:</p> <pre><code>{\n\"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n\"mobile\": \"9842XXXXXX\",\n\"transaction_pin\": \"1234\",\n\"amount\": 10000,\n\"product_identity\": \"book/id-120\",\n\"product_name\": \"A Song of Ice and Fire\",\n\"product_url\": \"http://bookexample.com\"\n}\n</code></pre> <p>The response will be something like this:</p> <pre><code>{\n\"token\": \"BVNKCiLZhZipkMGws5hgS8\",\n}\n</code></pre>"},{"location":"checkout/diy-wallet/#2-confirm-transaction","title":"2. Confirm transaction","text":"<p>In this step, you will need to prompt the user for the OTP (One Time Password), and their 3rd party khalti pin. Once those details are submitted, the request to verify transaction should be made like this:</p> <p>The value in <code>token</code> key from the response in previous step is required to verify the transaction.</p> <p>Request signature:</p> <ul> <li>URL: <code>https://khalti.com/api/v2/payment/confirm/</code></li> <li>Method: <code>POST</code></li> <li>Data:</li> <li><code>public_key</code>: Required. Should be same as the key used for transaction initiation.</li> <li><code>token</code>: Required. Transaction initiation token.</li> <li><code>confirmation_code</code>: Required. OTP submitted by the user.</li> <li><code>transaction_pin</code>: Required. Third party khalti pin submitted by the user.</li> </ul> <p>A sample request adhering to above signature will look like this:</p> <pre><code>{\n\"public_key\": \"live_public_key_546eb6da05544d7d88961db04fdb9721\",\n\"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n\"confirmation_code\": \"206964\",\n\"transaction_pin\": \"1234\"\n}\n</code></pre> <p>A successful request will yield a response that looks something like this:</p> <pre><code>{\n\"token\": \"VGMyaKVDQQyorBiQ3W99WL\",\n\"amount\": 10000,\n\"mobile\": \"98XXXXX099\",\n\"product_identity\": \"book/id-120\",\n\"product_name\": \"A Song of Ice and Fire\"\n}\n</code></pre>"},{"location":"checkout/diy-wallet/#3-verify-transaction","title":"3. Verify transaction","text":"<p>The API requests mentioned in previous steps are to be made from the client side i.e. from the front-end. Once those steps are complete, you  need to make a verification request using your secret key from the server.</p> <p>See http://docs.khalti.com/api/verification/ for more information on how to verify the transaction.</p>"},{"location":"checkout/diy-wallet/#notes","title":"Notes","text":"<ol> <li>Initiate and confirm api requests should be made from the front-end.</li> </ol>"},{"location":"checkout/ios/","title":"iOS SDK","text":"<p>This documentation details the process to integrate Khalti payment gateway in your iOS app.</p>"},{"location":"checkout/ios/#example","title":"Example","text":"<p>Swift : Clone project and use 'Example' directory. Do 'pod install'.</p> <p>Objective-C :  Clone project and use 'Example Obj-c' directory. Do 'pod install'.</p>"},{"location":"checkout/ios/#installation-guide","title":"Installation guide","text":"<p>Khalti is available through CocoaPods. To install it, simply add the following line to your Podfile:</p> <pre><code>pod 'Khalti'\n</code></pre>"},{"location":"checkout/ios/#usage","title":"Usage","text":""},{"location":"checkout/ios/#adding-customschme","title":"Adding CustomSchme","text":"<p>Khalti uses custom Scheme: So merhant should setup URLScheme unique for their app. We have made usability as of user case.</p> <p></p> <p>After adding Url Scheme create global constant for same customUrlScheme as below <pre><code>let khaltiUrlScheme:String = \"KhaltiPayExampleScheme\"\n</code></pre></p>"},{"location":"checkout/ios/#requirements","title":"Requirements","text":"<p>To work around with this redirection you have to implement some openUrl in <code>Appdelegate.swift</code>.</p> <p><code>Khalti.shared.defaultAction()</code> returns <code>true</code> if you initiate payment through Khalti. <code>Khalti.shared.action(with: url)</code> is needed for complete action after ebanking and card payment.</p> <p>Note: Using <code>Khalti.shared.action(with: url)</code>  is mandatory.</p> <p>Add following code to <code>Appdelegate.swift</code> <pre><code> func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -&gt; Bool {\nKhalti.shared.action(with: url)\nreturn Khalti.shared.defaultAction() // Or true\n}\n</code></pre></p>"},{"location":"checkout/ios/#using-at-particular-viewcontroller","title":"Using at particular ViewController","text":"<p>At your viewController during action of pay add initiate config file</p> <p>When instantiating <code>Config</code>  pass public key, product id, product name, amount (in paisa). Product web url and additional data are optional. <pre><code>let TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData)\n// Data passed here are based on Example project\n</code></pre></p> <p>Note:  Public is provided to every merchant of khalti. Intially test is available to every merchant and live key is provided after MoU signup with Khalti.</p> <p>At this stage the scheme named you declared earlier is passed to <code>Khatli.shared.appUrlScheme</code></p> <pre><code>Khalti.shared.appUrlScheme = khaltiUrlScheme // see above for file khaltiUrlScheme\n// This can be used at appdelegate during didfinishlaunching.\n// This should be mandatory\n</code></pre> <p>Finally present the khaltiPay Viewcontroller by calling public funcation <pre><code>Khalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n</code></pre></p> <p>Params of present function of Khalti</p> param Value caller viewController  from where you initate payment. with Config object delegate self <p>Delegate must be assigned to same Viewcontroller to get callback action from KhaltiPayDelegate.</p>"},{"location":"checkout/ios/#example-as-used-in-example-project","title":"Example as used in Example Project","text":"<p><pre><code>let extra:[String : Any] =  [\"no\":false,\"yes\":true,\"int\" : 0, \"float\":12.23]\nlet jsonData = try? JSONSerialization.data(withJSONObject: extra, options: JSONSerialization.WritingOptions())\nlet jsonString = String(data: jsonData!, encoding: .utf8)!\nlet additionalData:Dictionary&lt;String,String&gt; = [\n\"merchant_name\" : \"HelloPaaaaisaPVTLtd.\",\n\"merchant_extra\" : jsonString\n]\nKhalti.shared.appUrlScheme = khaltiUrlScheme\nlet khaltiMerchantKey = \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\" // This key is from local server so it won't work if you use the example as is it. Use your own public test key\nlet TEST_CONFIG:Config = Config(publicKey: khaltiMerchantKey, amount: 1000, productId: \"1234567890\", productName: \"Dragon_boss\", productUrl: \"http://gameofthrones.wikia.com/wiki/Dragons\",additionalData: additionalData, cardPayment:false)\nKhalti.present(caller: self, with: TEST_CONFIG, delegate: self)\n</code></pre> Config file has property cardPayment with default value false, indication the cardPayment facility is OFF. If you want cardPayment available to your users then set cardPayment option to true while creating config object. Please read merchant terms and conditions before enabling this feature. Additionally, Config class also accepts a Dictionary which you can use to pass any additional data. Make sure you add a <code>merchant_</code> prefix in your map key."},{"location":"checkout/ios/#using-delegates","title":"Using delegates","text":"<p>The viewController you implement pay action should contain KhaltiPayDelegate implementing  <code>onCheckOutSuccess(data: Dictionary&lt;String, Any&gt;)</code> <code>onCheckOutError(action: String, message: String)</code></p> <pre><code>extension YourViewController: KhaltiPayDelegate {\nfunc onCheckOutSuccess(data: Dictionary&lt;String, Any&gt;) {\nprint(data)\nprint(\"Oh there is success message received\")\n}\nfunc onCheckOutError(action: String, message: String) {\nprint(action)\nprint(message)\nprint(\"Oh there occure error in payment\")\n}\n}\n</code></pre>"},{"location":"checkout/ios/#summary","title":"Summary","text":""},{"location":"checkout/ios/#callback-methods","title":"Callback Methods","text":"Method Description <code>onCheckOutSuccess(data: Dictionary&lt;String, Any&gt;)</code> This method is called when a transaction has been completed and confirmed by the user. A dictionary containing an access token, required to verify the transaction and data passed through Config instance is returned. Once this method is called, use the access token to verify the transaction. Please follow the verification process for further instructions. <code>onCheckOutError(action: String, message: String, data:Dictionary&lt;String,Any&gt;?)</code> This method is called when an error occurs during payment initiation and confirmation. Action, message and errordata value is passed where action defines, the current action being performed, message defines the error and data defines the errorData associated with error if exists."},{"location":"checkout/ios/#response-sample","title":"Response Sample","text":""},{"location":"checkout/ios/#success-messsage","title":"Success Messsage","text":"Key Value Type mobile 98XXXXXXXX String product_name Product Name String product_identity Product Id String product_url Product Url String amount 100 Int token token String cardPayment false Bool <p>The success message also contains all the <code>key</code> and <code>value</code> provide as extra data while initiating <code>Config</code>.</p>"},{"location":"checkout/ios/#error-messsage","title":"Error Messsage","text":"Variable Description Type action initiate/confirm/ebanking String message Detail Error Message String data data of error   (Optional) Dictionary?"},{"location":"checkout/ios/#support","title":"Support","text":"<p>For Queries, feel free to mail us at: merchant@khalti.com</p> <p>Check out the API Documentation.</p>"},{"location":"checkout/web/","title":"Web SDK (Deprecated)","text":"<p>This version of Web SDK has been deprecated and replaced by e-Payment (checkout) version.<p>Please refer to ePayment Checkout for the latest version.</p> </p> <p>This documentation details the process of Khalti Web/JavaScript SDK integration in your website/app. We also have SDKs for Android and iOS.</p>"},{"location":"checkout/web/#demo","title":"Demo","text":"<p>To get the feel of how Khalti checkout looks click the button below.</p> <p>Pay with Khalti Pay with Ebanking</p>"},{"location":"checkout/web/#installation","title":"Installation","text":"<p>Khalti checkout can be integrated with or without build tools like Webpack and Rollup.</p>"},{"location":"checkout/web/#install-without-build-tools","title":"Install Without build tools","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"https://khalti.s3.ap-south-1.amazonaws.com/KPG/dist/2020.12.17.0.0.0/khalti-checkout.iffe.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    ...\n    &lt;!-- Place this where you need payment button --&gt;\n&lt;button id=\"payment-button\"&gt;Pay with Khalti&lt;/button&gt;\n&lt;!-- Place this where you need payment button --&gt;\n&lt;!-- Paste this code anywhere in you body tag --&gt;\n&lt;script&gt;\nvar config = {\n// replace the publicKey with yours\n\"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n\"productIdentity\": \"1234567890\",\n\"productName\": \"Dragon\",\n\"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n\"paymentPreference\": [\n\"KHALTI\",\n\"EBANKING\",\n\"MOBILE_BANKING\",\n\"CONNECT_IPS\",\n\"SCT\",\n],\n\"eventHandler\": {\nonSuccess (payload) {\n// hit merchant api for initiating verfication\nconsole.log(payload);\n},\nonError (error) {\nconsole.log(error);\n},\nonClose () {\nconsole.log('widget is closing');\n}\n}\n};\nvar checkout = new KhaltiCheckout(config);\nvar btn = document.getElementById(\"payment-button\");\nbtn.onclick = function () {\n// minimum transaction amount must be 10, i.e 1000 in paisa.\ncheckout.show({amount: 1000});\n}\n&lt;/script&gt;\n&lt;!-- Paste this code anywhere in you body tag --&gt;\n    ...\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Click here for details on config parameters.</p>"},{"location":"checkout/web/#install-with-build-tools","title":"Install with build tools","text":"<p>Khalti checkout can be bundled with build tools like Webpack, Rollup, etc.</p>"},{"location":"checkout/web/#1-install-khalti-checkout-web","title":"1. Install <code>khalti-checkout-web</code>","text":""},{"location":"checkout/web/#using-yarn","title":"Using yarn","text":"<p><code>yarn add khalti-checkout-web</code></p>"},{"location":"checkout/web/#using-npm","title":"Using npm","text":"<p><code>npm install khalti-checkout-web --save</code></p>"},{"location":"checkout/web/#2-import-and-use-it-in-your-desired-component","title":"2. Import and use it in your desired component","text":"<pre><code>import KhaltiCheckout from \"khalti-checkout-web\";\nlet config = {\n// replace this key with yours\n\"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a390234\",\n\"productIdentity\": \"1234567890\",\n\"productName\": \"Drogon\",\n\"productUrl\": \"http://gameofthrones.com/buy/Dragons\",\n\"eventHandler\": {\nonSuccess (payload) {\n// hit merchant api for initiating verfication\nconsole.log(payload);\n},\n// onError handler is optional\nonError (error) {\n// handle errors\nconsole.log(error);\n},\nonClose () {\nconsole.log('widget is closing');\n}\n},\n\"paymentPreference\": [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"],\n};\nlet checkout = new KhaltiCheckout(config);\nlet btn = document.getElementById(\"payment-button\");\nbtn.onclick = function () {\n// minimum transaction amount must be 10, i.e 1000 in paisa.\ncheckout.show({amount: 1000});\n}\n</code></pre>"},{"location":"checkout/web/#api","title":"API","text":"<ul> <li> <p><code>KhaltiCheckout(configuration?)</code></p> <p>This creates an instance of the <code>KhaltiCheckOut</code> class. The <code>configuration</code> argument is a JavaScript object. See configuration for details on available configuration parameters.</p> </li> <li> <p><code>show(configuration?)</code></p> <ul> <li>Displays the Khalti checkout widget.</li> <li>Receives configuration as argument.</li> <li>Provide amount and mobile to prefill the checkout widget field. Amount must be in paisa and greater than equal to 1000 i.e Rs 10. <p><code>checkout.show({amount: 1000, mobile: 98XXXXXXXX})</code></p> </li> <li><code>mobile</code> is an optional field and expects Khalti Registered Number for wallet payment.</li> </ul> </li> <li> <p><code>hide()</code></p> <p>Hide the widget.</p> </li> </ul>"},{"location":"checkout/web/#configuration","title":"Configuration","text":"<p>Configuration is a Javascript object with following attributes.</p> Key Required Type Value publickKey true string Test or live public key which identifies the merchant. amount true integer Amount to pay must be in paisa. Minimum transaction amount is 1000 paisa ie Rs 10 productIdentity true string Unique product identifier at merchant. productName true string Name of product. productUrl true string Url of product. eventHandler true object It is a javascript object with three methods mobile false integer Mobile number of consumer. paymentPreference false array If not provided all the payment options will be rendered. It is javascript array with these options <code>\"KHALTI\", \"EBANKING\", \"MOBILE_BANKING\" \"CONNECT_IPS\", \"SCT\"</code> <ol> <li><code>onSuccess</code>     This method is called once a transaction is confirmed by a user.     The success response is in the following format:</li> </ol> <pre><code>{\n    \"idx\": \"8xmeJnNXfoVjCvGcZiiGe7\",\n    \"amount\": 1000,\n    \"mobile\": \"98XXXXX969\",\n    \"product_identity\": \"1234567890\",\n    \"product_name\": \"Dragon\",\n    \"product_url\": \"http://gameofthrones.wikia.com/wiki/Dragons\",\n    \"token\": \"QUao9cqFzxPgvWJNi9aKac\"\n}\n</code></pre> <p>It receives transaction <code>idx</code> of transaction, <code>token</code>, <code>amount</code> and other (key/)values with payloads. One should implement this method to initiate payment verification at merchant which in turn will make verification request at Khalti.</p> <p>Now you should send these values to your server and call khalti server to verify the transaction. For documentation on verification follow this link.</p> <ol> <li><code>onError (optional)</code>     This method is optional. If implemented, it will receive errors that occured during payment initiation and confirmation. Example error format for <code>Invalid Khalti PIN or Confirmation Code</code>:</li> </ol> <p>The error response during initiation will be something like this:</p> <pre><code>{\n\"detail\":\"Mobile or pin invalid.\",\n\"tries_remaining\":\"2\",\n\"error_key\":\"validation_error\"\n}\n</code></pre> <p>The error response during confirmation will be somethig like this:</p> <pre><code>{\n\"action\": \"WALLET_PAYMENT_CONFIRM\",\n\"message\": undefined,\n\"payload\": {\n\"detail\": \"Confirmation code or transaction pin does not match.\"\n},\n\"status_code\": 400\n}\n</code></pre> <ol> <li><code>onClose (optional)</code>         This method is also optional. If implemented, this method is called when <code>close icon(X)</code> of the widget is called.</li> </ol> <p>Additionally Configuration also accepts attribute starting with <code>merchant_</code> that can be used to pass additional (meta) data.</p> <ul> <li> <p><code>merchant_name</code>: This is merchant name</p> </li> <li> <p><code>merchant_extra</code>: This is extra data</p> </li> </ul> <p>The additional data starting with <code>merchant_</code> is returned in success response payload.</p> <p>Check out the source for Khalti checkout on Github.</p> <p>Now, for server side integration check Verification and Transaction api.</p>          var config = {             // replace the publicKey with yours             \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",             \"productIdentity\": \"1234567890\",             \"productName\": \"Dragon\",             \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",             \"eventHandler\": {                 onSuccess (payload) {                     // hit merchant api for initiating verfication                     console.log(payload);                 },                 onError (error) {                     console.log(error);                 },                 onClose () {                     console.log('widget is closing');                 }             },                         paymentPreference: [\"KHALTI\", \"EBANKING\",\"MOBILE_BANKING\", \"CONNECT_IPS\", \"SCT\"],         };                  var ebanking_config = {                     \"publicKey\": \"test_public_key_dc74e0fd57cb46cd93832aee0a507256\",                     \"productIdentity\": \"1234567890\",                     \"productName\": \"Dragon\",                     \"productUrl\": \"http://gameofthrones.wikia.com/wiki/Dragons\",                     \"eventHandler\": {                             onSuccess (payload) {                                     // hit merchant api for initiating verfication                                     console.log(payload);                             },                             onError (error) {                                     console.log(error);                             },                             onClose () {                                 console.log('widget is closing');                             }                     },                     paymentPreference: [\"EBANKING\"],                 }          var checkout = new KhaltiCheckout(config);                 var eBankingCheckout = new KhaltiCheckout(ebanking_config);         var btn = document.getElementById(\"payment-button\");                 var btn2 = document.getElementById('ebanking-button');         btn.onclick = function () {             checkout.show({amount: 1000});         }                 btn2.onclick = function () {             eBankingCheckout.show({amount: 1000});         }"},{"location":"checkout/flutter/khalti-flutter/","title":"Khalti Flutter SDK (with Payment Interface)","text":"<p>Khalti Payment Gateway SDK for Flutter with default payment interface, works out of the box without having to add any additional user interface.</p> <p> </p> <p> Khalti Payment Gateway for Flutter </p> <p> </p>"},{"location":"checkout/flutter/khalti-flutter/#introduction","title":"Introduction","text":"<p>Read the introduction here.</p>"},{"location":"checkout/flutter/khalti-flutter/#getting-started","title":"Getting Started","text":"<p>Integrating Khalti Payment Gateway requires merchant account. You can always create one easily from here.</p> <p>Read the steps to integrate Khalti Payment Gateway in details here.</p>"},{"location":"checkout/flutter/khalti-flutter/#supported-platforms","title":"Supported Platforms","text":"Payment Method Android iOS Web Desktop (macOS, Linux, Windows) Khalti Wallet \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f E-Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Mobile Banking \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Connect IPS \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c SCT \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c"},{"location":"checkout/flutter/khalti-flutter/#migrating-to-20","title":"Migrating to 2.0","text":"<p>Version 1.0 had an issue where multiple app with the package integrated, could interfere with each other's deeplink. Please follow the new setup after upgrading to 2.0 in order to fix the issue.</p>"},{"location":"checkout/flutter/khalti-flutter/#setup","title":"Setup","text":"<p>Detailed setup for each platform.</p>"},{"location":"checkout/flutter/khalti-flutter/#android","title":"Android","text":"<p>In your app's <code>AndroidManifest.xml</code>, add these lines inside <code>&lt;activity&gt;...&lt;/activity&gt;</code> tag:</p> <pre><code>&lt;meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" /&gt;\n&lt;intent-filter android:autoVerify=\"true\"&gt;\n&lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n&lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n&lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n&lt;data android:scheme=\"kpg\" android:host=\"{your package name}\" /&gt;\n&lt;/intent-filter&gt;\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#ios","title":"iOS","text":"<p>In your app's <code>Info.plist</code>, add these properties:</p> <pre><code>&lt;key&gt;FlutterDeepLinkingEnabled&lt;/key&gt;\n&lt;true/&gt;\n&lt;key&gt;CFBundleURLTypes&lt;/key&gt;\n&lt;array&gt;\n&lt;dict&gt;\n&lt;key&gt;CFBundleTypeRole&lt;/key&gt;\n&lt;string&gt;Editor&lt;/string&gt;\n&lt;key&gt;CFBundleURLSchemes&lt;/key&gt;\n&lt;array&gt;\n&lt;string&gt;kpg&lt;/string&gt;\n&lt;/array&gt;\n&lt;key&gt;CFBundleURLName&lt;/key&gt;\n&lt;string&gt;{your package name}&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/array&gt;\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#web","title":"Web","text":"<p>No configuration is required for web.</p>"},{"location":"checkout/flutter/khalti-flutter/#desktop","title":"Desktop","text":"<p>No configuration is required for desktop.</p>"},{"location":"checkout/flutter/khalti-flutter/#initialization","title":"Initialization","text":"<p>Wrap the topmost widget of your app with <code>KhaltiScope</code> widget. And add supported locales and <code>KhaltiLocalizations.delegate</code> as shown below.</p>"},{"location":"checkout/flutter/khalti-flutter/#navigator-approach","title":"Navigator Approach","text":"<p>When using <code>MaterialApp</code> or siblings.</p> <pre><code>KhaltiScope(\npublicKey: &lt;public-key&gt;,\nbuilder: (context, navigatorKey) {\nreturn MaterialApp(\nnavigatorKey: navigatorKey,\nsupportedLocales: const [\nLocale('en', 'US'),\nLocale('ne', 'NP'),\n],\nlocalizationsDelegates: const [\nKhaltiLocalizations.delegate,\n...\n],\n...\n);  } );\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#router-approach","title":"Router Approach","text":"<p>When using <code>MaterialApp.router</code> or siblings.</p> <pre><code>final routerDelegate = YourRouterDelegate();\nKhaltiScope(\npublicKey: &lt;public-key&gt;,\nnavigatorKey: routerDelegate.navigatorKey, builder: (context, _) {\nreturn MaterialApp.router(\nrouterDelegate: routerDelegate,\nsupportedLocales: const [\nLocale('en', 'US'),\nLocale('ne', 'NP'),\n],\nlocalizationsDelegates: const [\nKhaltiLocalizations.delegate,\n...\n],\n...\n);  } );\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#launching-payment-interface","title":"Launching Payment Interface","text":"<p>Khalti Payment interface can be launched in two ways:</p>"},{"location":"checkout/flutter/khalti-flutter/#using-khaltibutton","title":"Using KhaltiButton","text":"<p>The plugin includes easy to use button to launch the payment interface. It can be used as shown below:</p> <pre><code>final config = PaymentConfig(\namount: 10000, // Amount should be in paisa\nproductIdentity: 'dell-g5-g5510-2021',\nproductName: 'Dell G5 G5510 2021',\nproductUrl: 'https://www.khalti.com/#/bazaar',\nadditionalData: { // Not mandatory; can be used for reporting purpose\n'vendor': 'Khalti Bazaar',\n},\n)\nKhaltiButton(\nconfig: config,\npreferences: [ // Not providing this will enable all the payment methods.\nPaymentPreference.khalti,\nPaymentPreference.eBanking,\n],\nonSuccess: (successModel) {\n// Perform Server Verification \n},\nonFailure: (failureModel) {\n// What to do on failure?\n},\nonCancel: () {\n// User manually cancelled the transaction\n},\n),\n</code></pre> <p>If you want to use only specific payment method then the following dedicated buttons can be used instead: - <code>KhaltiButton.wallet(...)</code> - <code>KhaltiButton.eBanking(...)</code> - <code>KhaltiButton.mBanking(...)</code> - <code>KhaltiButton.connectIPS(...)</code> - <code>KhaltiButton.sct(...)</code></p>"},{"location":"checkout/flutter/khalti-flutter/#manual-method","title":"Manual Method","text":"<p>Another method to launch the payment interface is using <code>KhaltiScope.pay()</code> method:</p> <pre><code>Inkwell(\nonTap: () {\nKhaltiScope.of(context).pay(\nconfig: config,\npreferences: [\nPaymentPreference.connectIPS,\nPaymentPreference.eBanking,\nPaymentPreference.sct,\n],\nonSuccess: onSuccess,\nonFailure: onFailure,\nonCancel: onCancel,\n);\n},\nchild: Text('Launch Payment Interface'),\n);\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#customizing-return-url","title":"Customizing Return URL","text":"<p>Their might be a need to use custom <code>returnUrl</code>, specially in Web platform.</p> <p>Passing a custom return url will result in data url, in following format after successful payment. <pre><code>&lt;returnUrl&gt;/?&lt;data&gt;\n</code></pre></p> <p>e.g. Let's say you set a <code>returnUrl = 'https://example.com/test';</code>. Then the data url will be <code>https://example.com/test/?key=value</code>.</p> <p>A custom return url can be set in <code>PaymentConfig</code>:</p> <pre><code>final config = PaymentConfig(\nreturnUrl: 'https://example.com/test',\n...\n);\n</code></pre>"},{"location":"checkout/flutter/khalti-flutter/#customizing-ui","title":"Customizing UI","text":"<p>This package doesn't support high level of customization as this is more of a plug &amp; play package.</p> <p>If a custom interface is required then khalti package can be used.</p>"},{"location":"checkout/flutter/khalti-flutter/#example","title":"Example","text":"<p>Find more detailed example here.</p>"},{"location":"checkout/flutter/khalti-flutter/#server-verification","title":"Server Verification","text":"<p>After success from the client side payment, the next step is to perform server verification.</p> <p>A server verification is required since the client side makes the payment directly to Khalti without going through your server first, you need to be sure that the customer actually paid the money they were supposed to before completing their order. This type of verification can only be done securely from the server.</p> <p>Know how to perform server verification here.</p>"},{"location":"checkout/flutter/khalti-flutter/#contributing","title":"Contributing","text":"<p>Contributions are always welcome. Also, if you have any confusion, please feel free to create an issue.</p>"},{"location":"checkout/flutter/khalti-flutter/#internationalization","title":"Internationalization","text":"<p>Steps to add support for new language 1. Create a new file for the language <code>khalti_localizations_&lt;language-code&gt;.dart</code> inside <code>localization</code> directory.      Let's say you want to add support for Nepali language, then the file should be <code>khalti_localizations_ne.dart</code>.</p> <ol> <li> <p>Copy contents of <code>khalti_localizations_en.dart</code> to the newly created file and rename the class accordingly.</p> </li> <li> <p>Replace all the strings with the localized strings inside the file.</p> </li> <li> <p>Add entry to <code>_localizations</code> map inside <code>khalti_localizations.dart</code>.         <code>dart          const Map&lt;String, KhaltiLocalizations&gt; _localizations = {              'en': _KhaltiLocalizationsEn(),              'ne': _KhaltiLocalizationsNe(), // Newly added entry          };</code></p> </li> <li> <p>Submit a Pull Request with the changes. But ensure that the code changes are well formatted.      Format the generated code if needed: <code>flutter format .</code></p> </li> </ol>"},{"location":"checkout/flutter/khalti-flutter/#support","title":"Support","text":"<p>For Queries, feel free to call us at:</p> <p>Contact Our Merchant Team * Mobile (Viber / Whatsapp): 9801165567, 9801165538 * Email: merchant@khalti.com</p> <p>(To integrate Khalti to your business and other online platforms.)</p> <p>Contact Our Merchant Support * Mobile (Viber / Whatsapp): 9801165565, 9801856383, 9801856451 * Email: merchantcare@khalti.com</p> <p>Contact Our Technical Team * Mobile (Viber / Whatsapp): 9843007232 * Email / Skype: sashant@khalti.com</p> <p>(For payment gateway integration support.)</p>"},{"location":"checkout/flutter/khalti-flutter/#license","title":"License","text":"<pre><code>Copyright (c) 2021 The Khalti Authors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"checkout/flutter/khalti/","title":"Khalti Flutter SDK (without Payment Interface)","text":"<p>Khalti Payment Gateway SDK for Flutter without payment interface, a custom user interface is required.</p> <p> </p> <p> Khalti Payment Gateway </p> <p> </p>"},{"location":"checkout/flutter/khalti/#want-easier-integration","title":"Want easier integration?","text":"<p>This package only provides set of methods for client integration of Khalti Payment Gateway.</p> <p>If custom UI is not required then prefer using khalti_flutter instead.</p>"},{"location":"checkout/flutter/khalti/#setup","title":"Setup","text":""},{"location":"checkout/flutter/khalti/#set-up-public-key","title":"Set up public key","text":"<p>The first step is to grab public key from merchant dashboard. Read the getting started to learn about the integration process and grabbing public key.</p> <pre><code>  KhaltiService.publicKey = &lt;your-public-key-here&gt;;\n</code></pre> <p>Note: During integration, use test keys instead of live one.</p>"},{"location":"checkout/flutter/khalti/#initiating-payment-using-wallet","title":"Initiating payment using Wallet","text":"<pre><code>final service = KhaltiService(client: KhaltiHttpClient());\nfinal initiationModel = await service.initiatePayment(\nrequest: PaymentInitiationRequestModel(\namount: 1000, // in paisa\nmobile: &lt;khalti-mobile-number&gt;,\nproductIdentity: 'mac-mini',\nproductName: 'Apple Mac Mini',\ntransactionPin: &lt;khalti-mpin&gt;,\nproductUrl: 'https://khalti.com/bazaar/mac-mini-16-512-m1',\nadditionalData: {\n'vendor': 'Oliz Store',\n'manufacturer': 'Apple Inc.',\n},\n),\n);\n</code></pre> <p>After successful call to the method, an OTP is sent to the mobile number provided.</p>"},{"location":"checkout/flutter/khalti/#confirming-transaction","title":"Confirming Transaction","text":"<pre><code>final confirmationModel = await service.confirmPayment(\nrequest: PaymentConfirmationRequestModel(\nconfirmationCode: &lt;otp-code&gt;, // the OTP code received through previous step\ntoken: initiationModel.token,\ntransactionPin: &lt;khalti-mpin&gt;,\n),\n);\n</code></pre>"},{"location":"checkout/flutter/khalti/#building-url-for-bank-payment","title":"Building URL for bank payment","text":"<pre><code>final bankPaymentUrl = service.buildBankUrl(\nbankId: '1234567890',\namount: 1000,\nmobile: mobile,\nproductIdentity: 'macbook-pro-21',\nproductName: 'Macbook Pro 2021',\npaymentType: BankPaymentType.eBanking,\n);\n</code></pre> <p>The URL obtained can be launched using url_launcher and the Khalti server will redirect your client to bank portal where user can access e-banking, finally redirecting back to original/parent page with the response.</p>"},{"location":"checkout/flutter/khalti/#fetching-available-banks-for-receiving-payment","title":"Fetching available banks for receiving payment","text":"<pre><code>final banks = await service.getBanks(paymentType: BankPaymentType.eBanking);\n</code></pre>"},{"location":"checkout/flutter/khalti/#license","title":"License","text":"<pre><code>Copyright (c) 2021 The Khalti Authors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Sparrow Pay Pvt. Ltd. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"plugins/magneto/","title":"Magneto","text":"<p>This is Khalti Payment Gateway plugin for Magneto 2.</p> <p>Check out the source for Khalti plugin on Github.</p>"},{"location":"plugins/magneto/#installation","title":"Installation","text":"<ul> <li>Create the following folder structure inside \"app\" folder and copy all the files   \"Fourwallsinn/Khalti\"</li> <li>After you have copied all the files the folder structure should be like this   \"app/code/Fourwallsinn/Khalti/UPLOADED_FILES\"</li> <li>Run the following CLI commands to complete the Plugin Installation   <code>php bin/magento setup:upgrade</code></li> <li>If you are on Production Environment, make sure you run the following command as well   <code>php bin/magento setup:static-content:deploy</code></li> </ul>"},{"location":"plugins/opencart/","title":"Opencart","text":"<p>This is Khalti Payment Gateway extension for Opencart.</p> <p>Check out the source for Khalti plugin on Github.</p>"},{"location":"plugins/opencart/#installation","title":"Installation","text":"<p>The basic steps to follow:</p> <ul> <li>Go to <code>Extension &gt; Installer</code> in your admin dashboard</li> <li>Upload the zip file of module (link)</li> </ul> <p></p> <ul> <li>Now after successful upload go to <code>Extensions &gt; Extensions</code></li> <li>Choose <code>Payment</code> on extension type section you will get a list with Khalti in it.</li> <li>Select to edit button. You will see fields as below.</li> </ul> <p></p> <ul> <li>Set <code>Test mode</code> to Yes and Status to Enabled. Enter your test public key and test secret key in respective fields and save. You can get keys from <code>Keys</code> section in your merchant dashboard</li> </ul> <p></p> <ul> <li>After successful upload go to <code>Design &gt; Theme Editor</code> in dashboard side nav</li> <li>Select <code>common &gt; header.twig</code> from <code>Choose a template</code> section <pre><code>&lt;script  \"https://khalti.com/static/khalti-checkout.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre></li> <li>Add above line  in <code>header.twig</code> and save.</li> </ul> <p></p> <p>you may need to manage permission of your project folders</p> <p>if downloaded zip is not compatible try compressing to zip after you uncompressing it</p>"},{"location":"plugins/opencart/#manual-installation","title":"Manual Installation","text":"<ul> <li>Extract the zip file.</li> <li>Copy all files on the root directory of project</li> <li>add script with src \"https://khalti.com/static/khalti-checkout.js\" on your themes header file which is located on \"catalog/view/theme/YOUR_THEME_NAME/common/header.twig</li> <li>clear Opencart cache</li> </ul>"},{"location":"plugins/opencart/#testing","title":"Testing","text":"<ul> <li>Before testing set default currency to Nepalese Rupee. (How)</li> <li>Go to your shop and complete a transaction from Wallet payment type.</li> </ul>"},{"location":"plugins/opencart/#deploy","title":"Deploy","text":"<ul> <li>If a test is passed successfully, go to keys section in your merchant dashboard. You will get your Live keys there.</li> <li>Uncheck the Test Mode and enter your public and secret keys in respective fields</li> <li>Finally save the changes.</li> </ul>"},{"location":"plugins/prestashop/","title":"Prestashop","text":"<p>This is our add-on module for PrestaShop, a open source e-commerce solution.</p> <p>Check out the source for Khalti plugin on Github.</p>"},{"location":"plugins/whmcs/","title":"Official Khalti module for WHMCS","text":"<p>This is third party gateway modules to integrate Khalti payment solution with the WHMCS platform.</p>"},{"location":"plugins/whmcs/#installation","title":"Installation","text":"<ol> <li>Download the ZIP (or tar.gz) file from the releases See the releases</li> <li>Simply extract at the root folder of your WHMCS installation. Following files will be copied</li> </ol>"},{"location":"plugins/whmcs/#file-structure","title":"File Structure","text":"<p><pre><code>modules /\n | gateways /\n   | khaltigateway.php\n   | callback /\n       | khaltigateway.php\n   | khaltigateway /\n      | common.php\n      | index.php\n      | init.php\n      | step2.php\n</code></pre>    (Basically, the plugin creates    - file khaltigateway.php under modules/gateways directory of your root installation,    - directory khaltigateway/ under modules/gateways directory of your root installation    - file khaltigateway.php under modules/gateways/callback directory of your root installation. (This file is kept just to maintain the convention that WHMCS suggests)</p>"},{"location":"plugins/whmcs/#activate","title":"Activate","text":"<p>Login to admin area of your WHMCS installation and enable the gateway from <code>Setup -&gt; Payments -&gt; Payment Gateways</code> (Refer to the image below) </p>"},{"location":"plugins/whmcs/#configure","title":"Configure","text":"<p>Once the gateway is enabled, the gateway parameters need to be configured. (Refer to the image below)  PS: Please make sure that the currency \"NPR\" is selected for the option \"Convert to For Processing\"</p>"},{"location":"plugins/woocommerce/","title":"WooCommerce","text":"<p>This is Khalti Payment Gateway extension for WooCommerce. Check out the source for Khalti plugin on Github.</p>"},{"location":"plugins/woocommerce/#installation","title":"Installation","text":"<p>The basic steps to follow:</p> <ul> <li>Go to the plugin section in your WordPress admin dashboard</li> <li>Click on Add New and upload the zip file of Khalti WooCommerce plugin (link) and upload it</li> </ul> <p></p> <ul> <li>After installation is complete, go to <code>WooCommerce &gt; Settings</code></li> <li>Go to <code>Payments</code> option where you can find Khalti among other payment gateways</li> <li>Click on Khalti option and enter your test secret key and test public key in respective fields. You can get keys from <code>Keys</code> section in your merchant dashboard</li> </ul> <p></p> <ul> <li>Click on save changes</li> </ul>"},{"location":"plugins/woocommerce/#testing","title":"Testing","text":"<ul> <li>Should enable khalti and Test Mode as shown in above example.</li> <li>Currency should be Nepalese Rupee. (How)</li> <li>Go to your shop and complete a transaction from Wallet payment type.</li> </ul>"},{"location":"plugins/woocommerce/#deploy","title":"Deploy","text":"<ul> <li>If you pass the test, Go to keys section in your merchant account, you can get your Live keys their</li> <li>Uncheck the Test Mode and enter your public and secret keys in respective fields</li> <li>Finally save the changes.</li> </ul>"}]}